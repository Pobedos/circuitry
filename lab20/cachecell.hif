HIF003
--
-- Copyright (C) 1988-1998 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	lpm_ram_dq.tdf
	{
		lpm_ram_dq [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_WIDTHAD,LPM_NUMWORDS,LPM_INDATA=REGISTERED,LPM_ADDRESS_CONTROL=REGISTERED,LPM_OUTDATA=REGISTERED,LPM_FILE=NO_FILE,DEVICE_FAMILY] [aglobal.inc,lpm_decode.inc,lpm_mux.inc,altram.inc]
		{
			1 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=8,LPM_WIDTHAD=1,LPM_INDATA=UNREGISTERED,LPM_ADDRESS_CONTROL=UNREGISTERED,LPM_OUTDATA=UNREGISTERED,LPM_FILE=NO_FILE,DEVICE_FAMILY=MAX7000] [data7,data6,data5,data4,data3,data2,data1,data0,we,q7,q6,q5,q4,q3,q2,q1,q0];
		}
	}
	lpm_compare.tdf
	{
		lpm_compare [USE_LPM_FOR_AHDL_OPERATORS,lpm_width,LPM_REPRESENTATION=UNSIGNED,LPM_PIPELINE=0,CHAIN_SIZE=8,ONE_INPUT_IS_CONSTANT=NO,CARRY_CHAIN=MANUAL,CASCADE_CHAIN=MANUAL,CARRY_CHAIN_LENGTH=8,CASCADE_CHAIN_LENGTH=8,DEVICE_FAMILY=FLEX8000] [aglobal.inc,altshift.inc,comptree.inc]
		{
			8 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=8,LPM_REPRESENTATION=UNSIGNED,LPM_PIPELINE=0,CHAIN_SIZE=8,ONE_INPUT_IS_CONSTANT=NO,CARRY_CHAIN=IGNORE,CASCADE_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=0,CASCADE_CHAIN_LENGTH=0,DEVICE_FAMILY=MAX7000] [dataa7,dataa6,dataa5,dataa4,dataa3,dataa2,dataa1,dataa0,datab7,datab6,datab5,datab4,datab3,datab2,datab1,datab0,aeb];
		}
	}
	altram.tdf
	{
		altram [USE_LPM_FOR_AHDL_OPERATORS,WIDTH,AD_WIDTH,NUMWORDS,FILE=NO_FILE,REGISTERINPUTMODE=DEFAULT,USE_EAB=ON,DEVICE_FAMILY] [aglobal.inc,lpm_mux.inc,lpm_decode.inc,memmodes.inc]
		{
			2 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=8,AD_WIDTH=1,NUMWORDS=2,FILE=NO_FILE,REGISTERINPUTMODE=DEFAULT,USE_EAB=ON,DEVICE_FAMILY=MAX7000] [Address0,Data0,Data1,Data2,Data3,Data4,Data5,Data6,Data7,WE,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7];
		}
	}
	lpm_mux.tdf
	{
		lpm_mux [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_SIZE,LPM_WIDTHS,LPM_PIPELINE=0] [altshift.inc,bypassff.inc,muxlut.inc]
		{
			3 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=8,LPM_SIZE=2,LPM_WIDTHS=1,LPM_PIPELINE=0] [sel0,data0_0,data0_1,data0_2,data0_3,data0_4,data0_5,data0_6,data0_7,data1_0,data1_1,data1_2,data1_3,data1_4,data1_5,data1_6,data1_7,result0,result1,result2,result3,result4,result5,result6,result7];
		}
	}
	altshift.tdf
	{
		altshift [USE_LPM_FOR_AHDL_OPERATORS,WIDTH=4,DEPTH=0] []
		{
			4 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=8,DEPTH=0] [data0,data1,data2,data3,data4,data5,data6,data7,result0,result1,result2,result3,result4,result5,result6,result7];
			7 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=2,DEPTH=0] [data0,data1,result0,result1];
			11 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=1,DEPTH=0] [data0,result0];
		}
	}
	muxlut.tdf
	{
		muxlut [USE_LPM_FOR_AHDL_OPERATORS,SIZE,LEVEL,TOT_LEVELS,LATENCY,REM_LATENCY,LOCAL=0,CASCADE_CHAIN] [altshift.inc,muxlut.inc]
		{
			5 [USE_LPM_FOR_AHDL_OPERATORS=OFF,SIZE=2,LEVEL=0,TOT_LEVELS=1,LATENCY=0,LOCAL=0,CASCADE_CHAIN=IGNORE] [select0,data0,data1,result];
		}
	}
	lpm_decode.tdf
	{
		lpm_decode [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_DECODES,LPM_PIPELINE=0,CASCADE_CHAIN,DEVICE_FAMILY] [aglobal.inc,lpm_constant.inc,lpm_compare.inc,altshift.inc,declut.inc]
		{
			6 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=1,LPM_DECODES=2,LPM_PIPELINE=0,CASCADE_CHAIN=IGNORE,DEVICE_FAMILY=MAX7000] [enable,data0,eq0,eq1];
		}
	}
	comptree.tdf
	{
		comptree [USE_LPM_FOR_AHDL_OPERATORS,lpm_width,CHAIN_LENGTH=8,ONE_INPUT_CONSTANT=0,OUTPUTS_CLOCKED=0,BURRIED_CLOCKED=1,MODE=0] [lpm_constant.inc,cmpchain.inc,comptree.inc]
		{
			9 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=8,CHAIN_LENGTH=8,ONE_INPUT_CONSTANT=0,OUTPUTS_CLOCKED=0,BURRIED_CLOCKED=1,MODE=0] [datab0,datab1,datab2,datab3,datab4,datab5,datab6,datab7,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,dataa7,aeb];
		}
	}
	cmpchain.tdf
	{
		cmpchain [USE_LPM_FOR_AHDL_OPERATORS,lpm_width,ONE_INPUT_CONSTANT,MODE,CARRY_CHAIN,CASCADE_CHAIN,CARRY_CHAIN_LENGTH,CASCADE_CHAIN_LENGTH,DEVICE_FAMILY] [aglobal.inc,comptree.inc]
		{
			10 [USE_LPM_FOR_AHDL_OPERATORS=OFF,lpm_width=8,ONE_INPUT_CONSTANT=0,MODE=0,CARRY_CHAIN=IGNORE,CASCADE_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=0,CASCADE_CHAIN_LENGTH=0,DEVICE_FAMILY=MAX7000] [datab0,datab1,datab2,datab3,datab4,datab5,datab6,datab7,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,dataa7,aeb];
		}
	}
	cachecell.gdf
	{
		cachecell [] []
		{
			0 [] [];
		}
	}
}
TREE
{
	cachecell::(0,0):(0): cachecell.gdf
	{
		lpm_ram_dq::(0,0):(3): lpm_ram_dq.tdf
		{
			altram:2:(84,5):(47,sram): altram.tdf
			{
				lpm_mux:3:(140,4):(48,mux): lpm_mux.tdf
				{
					altshift:4:(88,2):(54,external_latency_ffs): altshift.tdf;
					muxlut:5:(167,21):(75): muxlut.tdf;
					muxlut:5:(167,21):(88): muxlut.tdf;
					muxlut:5:(167,21):(101): muxlut.tdf;
					muxlut:5:(167,21):(114): muxlut.tdf;
					muxlut:5:(167,21):(127): muxlut.tdf;
					muxlut:5:(167,21):(140): muxlut.tdf;
					muxlut:5:(167,21):(153): muxlut.tdf;
					muxlut:5:(167,21):(166): muxlut.tdf;
				}
				lpm_decode:6:(143,4):(79,decode): lpm_decode.tdf
				{
					altshift:7:(75,2):(33,external_latency_ffs): altshift.tdf;
				}
			}
		}
		lpm_compare::(0,0):(2): lpm_compare.tdf
		{
			comptree:9:(283,3):(51,comparator): comptree.tdf
			{
				cmpchain:10:(176,5):(47,cmp_end): cmpchain.tdf;
			}
			altshift:11:(305,2):(78,aeb_ext_lat_ffs): altshift.tdf;
			altshift:11:(306,2):(85,agb_ext_lat_ffs): altshift.tdf;
		}
		lpm_ram_dq::(0,0):(1): lpm_ram_dq.tdf
		{
			altram:2:(84,5):(47,sram): altram.tdf
			{
				lpm_mux:3:(140,4):(48,mux): lpm_mux.tdf
				{
					altshift:4:(88,2):(54,external_latency_ffs): altshift.tdf;
					muxlut:5:(167,21):(75): muxlut.tdf;
					muxlut:5:(167,21):(88): muxlut.tdf;
					muxlut:5:(167,21):(101): muxlut.tdf;
					muxlut:5:(167,21):(114): muxlut.tdf;
					muxlut:5:(167,21):(127): muxlut.tdf;
					muxlut:5:(167,21):(140): muxlut.tdf;
					muxlut:5:(167,21):(153): muxlut.tdf;
					muxlut:5:(167,21):(166): muxlut.tdf;
				}
				lpm_decode:6:(143,4):(79,decode): lpm_decode.tdf
				{
					altshift:7:(75,2):(33,external_latency_ffs): altshift.tdf;
				}
			}
		}
	}
}
