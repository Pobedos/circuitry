HIF003
--
-- Copyright (C) 1988-1998 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	cmpconst.tdf
	{
		cmpconst [CVALUE,WIDTH,USE_LPM_FOR_AHDL_OPERATORS] []
		{
			24 [CVALUE=0,WIDTH=4,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result,data3,data2,data1,data0];
		}
	}
	bypassff.tdf
	{
		bypassff [WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS] []
		{
			22 [WIDTH=3,USE_LPM_FOR_AHDL_OPERATORS=OFF] [q2,q1,q0,d2,d1,d0];
		}
	}
	declut.tdf
	{
		declut [LATENCY,TOT_LEVELS,STAGE,width,USE_LPM_FOR_AHDL_OPERATORS] [declut.inc,bypassff.inc]
		{
			23 [LATENCY=0,TOT_LEVELS=2,STAGE=1,width=3,USE_LPM_FOR_AHDL_OPERATORS=OFF] [eq7,eq6,eq5,eq4,eq3,eq2,eq1,eq0,data2,data1,data0,enable];
			21 [LATENCY=0,TOT_LEVELS=2,STAGE=0,width=4,USE_LPM_FOR_AHDL_OPERATORS=OFF] [eq15,eq14,eq13,eq12,eq11,eq10,eq9,eq8,eq7,eq6,eq5,eq4,eq3,eq2,eq1,eq0,data3,data2,data1,data0,enable];
		}
	}
	lpm_decode.tdf
	{
		lpm_decode [DEVICE_FAMILY,CASCADE_CHAIN,LPM_PIPELINE=0,LPM_DECODES,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [declut.inc,altshift.inc,lpm_compare.inc,lpm_constant.inc,aglobal.inc]
		{
			19 [DEVICE_FAMILY=FLEX10K,CASCADE_CHAIN=IGNORE,LPM_PIPELINE=0,LPM_DECODES=16,LPM_WIDTH=4,USE_LPM_FOR_AHDL_OPERATORS=OFF] [eq15,eq14,eq13,eq12,eq11,eq10,eq9,eq8,eq7,eq6,eq5,eq4,eq3,eq2,eq1,eq0,data3,data2,data1,data0,enable];
		}
	}
	lpm_constant.tdf
	{
		lpm_constant [LPM_CVALUE,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] []
		{
			18 [LPM_CVALUE=0,LPM_WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [];
		}
	}
	addcore.tdf
	{
		addcore [DEVICE_FAMILY,CARRY_CHAIN_LENGTH,CARRY_CHAIN,CONSTANT_CIN,width,USE_LPM_FOR_AHDL_OPERATORS] [addcore.inc,aglobal.inc]
		{
			17 [DEVICE_FAMILY=FLEX10K,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,CONSTANT_CIN=1,width=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result7,result6,result5,result4,result3,result2,result1,result0,dataa7,dataa6,dataa5,dataa4,dataa3,dataa2,dataa1,dataa0,datab7,datab6,datab5,datab4,datab3,datab2,datab1,datab0,cin];
		}
	}
	lpm_add_sub.tdf
	{
		lpm_add_sub [STYLE,DEVICE_FAMILY,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,OPTIMIZE_FOR_SPEED=5,MAXIMIZE_SPEED=5,LPM_PIPELINE=0,ONE_INPUT_IS_CONSTANT=NO,LPM_DIRECTION=DEFAULT,LPM_REPRESENTATION=SIGNED,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [lpm_add_sub.inc,addcore.inc,look_add.inc,bypassff.inc,altshift.inc,aglobal.inc]
		{
			16 [STYLE=NORMAL,DEVICE_FAMILY=FLEX10K,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,OPTIMIZE_FOR_SPEED=5,MAXIMIZE_SPEED=5,LPM_PIPELINE=0,ONE_INPUT_IS_CONSTANT=YES,LPM_DIRECTION=ADD,LPM_REPRESENTATION=SIGNED,LPM_WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result7,result6,result5,result4,result3,result2,result1,result0,dataa7,dataa6,dataa5,dataa4,dataa3,dataa2,dataa1,dataa0,datab7,datab6,datab5,datab4,datab3,datab2,datab1,datab0];
		}
	}
	cmpchain.tdf
	{
		cmpchain [DEVICE_FAMILY,CASCADE_CHAIN_LENGTH,CARRY_CHAIN_LENGTH,CASCADE_CHAIN,CARRY_CHAIN,MODE,ONE_INPUT_CONSTANT,lpm_width,USE_LPM_FOR_AHDL_OPERATORS] [comptree.inc,aglobal.inc]
		{
			12 [DEVICE_FAMILY=FLEX10K,CASCADE_CHAIN_LENGTH=2,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN=IGNORE,CARRY_CHAIN=IGNORE,MODE=0,ONE_INPUT_CONSTANT=1,lpm_width=4,USE_LPM_FOR_AHDL_OPERATORS=OFF] [aeb,dataa3,dataa2,dataa1,dataa0,datab3,datab2,datab1,datab0];
			10 [DEVICE_FAMILY=FLEX10K,CASCADE_CHAIN_LENGTH=2,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN=IGNORE,CARRY_CHAIN=IGNORE,MODE=0,ONE_INPUT_CONSTANT=0,lpm_width=2,USE_LPM_FOR_AHDL_OPERATORS=OFF] [aeb,dataa1,dataa0,datab1,datab0];
			8 [DEVICE_FAMILY=FLEX10K,CASCADE_CHAIN_LENGTH=2,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN=IGNORE,CARRY_CHAIN=IGNORE,MODE=0,ONE_INPUT_CONSTANT=0,lpm_width=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [aeb,dataa7,dataa6,dataa5,dataa4,dataa3,dataa2,dataa1,dataa0,datab7,datab6,datab5,datab4,datab3,datab2,datab1,datab0];
		}
	}
	comptree.tdf
	{
		comptree [MODE=0,BURRIED_CLOCKED=1,OUTPUTS_CLOCKED=0,ONE_INPUT_CONSTANT=0,CHAIN_LENGTH=8,lpm_width,USE_LPM_FOR_AHDL_OPERATORS] [comptree.inc,cmpchain.inc,lpm_constant.inc]
		{
			11 [MODE=0,BURRIED_CLOCKED=0,OUTPUTS_CLOCKED=1,ONE_INPUT_CONSTANT=1,CHAIN_LENGTH=1,lpm_width=4,USE_LPM_FOR_AHDL_OPERATORS=OFF] [aeb,dataa3,dataa2,dataa1,dataa0,datab3,datab2,datab1,datab0];
			9 [MODE=0,BURRIED_CLOCKED=0,OUTPUTS_CLOCKED=1,ONE_INPUT_CONSTANT=0,CHAIN_LENGTH=1,lpm_width=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [aeb,dataa7,dataa6,dataa5,dataa4,dataa3,dataa2,dataa1,dataa0,datab7,datab6,datab5,datab4,datab3,datab2,datab1,datab0];
			7 [MODE=0,BURRIED_CLOCKED=1,OUTPUTS_CLOCKED=0,ONE_INPUT_CONSTANT=0,CHAIN_LENGTH=8,lpm_width=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [aeb,dataa7,dataa6,dataa5,dataa4,dataa3,dataa2,dataa1,dataa0,datab7,datab6,datab5,datab4,datab3,datab2,datab1,datab0];
		}
	}
	muxlut.tdf
	{
		muxlut [CASCADE_CHAIN,LOCAL=0,REM_LATENCY,LATENCY,TOT_LEVELS,LEVEL,SIZE,USE_LPM_FOR_AHDL_OPERATORS] [muxlut.inc,altshift.inc]
		{
			5 [CASCADE_CHAIN=IGNORE,LOCAL=0,LATENCY=0,TOT_LEVELS=1,LEVEL=0,SIZE=2,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result,data1,data0,select0];
		}
	}
	altshift.tdf
	{
		altshift [DEPTH=0,WIDTH=4,USE_LPM_FOR_AHDL_OPERATORS] []
		{
			20 [DEPTH=0,WIDTH=16,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result15,result14,result13,result12,result11,result10,result9,result8,result7,result6,result5,result4,result3,result2,result1,result0,data15,data14,data13,data12,data11,data10,data9,data8,data7,data6,data5,data4,data3,data2,data1,data0];
			13 [DEPTH=0,WIDTH=1,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result0,data0];
			4 [DEPTH=0,WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result7,result6,result5,result4,result3,result2,result1,result0,data7,data6,data5,data4,data3,data2,data1,data0];
		}
	}
	lpm_mux.tdf
	{
		lpm_mux [LPM_PIPELINE=0,LPM_WIDTHS,LPM_SIZE,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [muxlut.inc,bypassff.inc,altshift.inc]
		{
			3 [LPM_PIPELINE=0,LPM_WIDTHS=1,LPM_SIZE=2,LPM_WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [result7,result6,result5,result4,result3,result2,result1,result0,data1_7,data1_6,data1_5,data1_4,data1_3,data1_2,data1_1,data1_0,data0_7,data0_6,data0_5,data0_4,data0_3,data0_2,data0_1,data0_0,sel0];
		}
	}
	rs.gdf
	{
		rs [] []
		{
			25 [] [];
		}
	}
	lpm_counter.tdf
	{
		lpm_counter [LABWIDE_SCLR=ON,CARRY_CNT_EN=SMART,NOT_GATE_PUSH_BACK=OFF,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,DEVICE_FAMILY,LPM_SVALUE=0,LPM_AVALUE=0,LPM_MODULUS=0,LPM_DIRECTION=DEFAULT,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [lpm_constant.inc,lpm_decode.inc,lpm_add_sub.inc,cmpconst.inc,lpm_compare.inc,lpm_counter.inc,dffeea.inc,aglobal.inc]
		{
			15 [LABWIDE_SCLR=ON,CARRY_CNT_EN=SMART,NOT_GATE_PUSH_BACK=OFF,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,DEVICE_FAMILY=FLEX10K,LPM_SVALUE=0,LPM_AVALUE=0,LPM_MODULUS=0,LPM_DIRECTION=DEFAULT,LPM_WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [eq15,eq14,eq13,eq12,eq11,eq10,eq9,eq8,eq7,eq6,eq5,eq4,eq3,eq2,eq1,eq0,clock,aset];
			14 [LABWIDE_SCLR=ON,CARRY_CNT_EN=SMART,NOT_GATE_PUSH_BACK=ON,CARRY_CHAIN_LENGTH=32,CARRY_CHAIN=IGNORE,DEVICE_FAMILY=FLEX10K,LPM_SVALUE=0,LPM_AVALUE=0,LPM_MODULUS=0,LPM_DIRECTION=DEFAULT,LPM_WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [eq7,aset,clock];
		}
	}
	lpm_compare.tdf
	{
		lpm_compare [DEVICE_FAMILY=FLEX8000,CASCADE_CHAIN_LENGTH=8,CARRY_CHAIN_LENGTH=8,CASCADE_CHAIN=MANUAL,CARRY_CHAIN=MANUAL,ONE_INPUT_IS_CONSTANT=NO,CHAIN_SIZE=8,LPM_PIPELINE=0,LPM_REPRESENTATION=UNSIGNED,lpm_width,USE_LPM_FOR_AHDL_OPERATORS] [comptree.inc,altshift.inc,aglobal.inc]
		{
			6 [DEVICE_FAMILY=FLEX10K,CASCADE_CHAIN_LENGTH=2,CARRY_CHAIN_LENGTH=32,CASCADE_CHAIN=IGNORE,CARRY_CHAIN=IGNORE,ONE_INPUT_IS_CONSTANT=NO,CHAIN_SIZE=8,LPM_PIPELINE=0,LPM_REPRESENTATION=UNSIGNED,lpm_width=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [aeb,datab0,datab1,datab2,datab3,datab4,datab5,datab6,datab7,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,dataa7];
		}
	}
	busmux.tdf
	{
		busmux [WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [lpm_mux.inc]
		{
			2 [WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,dataa7,sel,datab0,datab1,datab2,datab3,datab4,datab5,datab6,datab7,result0,result1,result2,result3,result4,result5,result6,result7];
		}
	}
	lpm_dff.tdf
	{
		lpm_dff [DEVICE_FAMILY,LPM_SVALUE=0,LPM_AVALUE=0,LPM_WIDTH,USE_LPM_FOR_AHDL_OPERATORS] [lpm_constant.inc,dffeea.inc,aglobal.inc]
		{
			1 [DEVICE_FAMILY=FLEX10K,LPM_SVALUE=0,LPM_AVALUE=0,LPM_WIDTH=8,USE_LPM_FOR_AHDL_OPERATORS=OFF] [q0,q1,q2,q3,q4,q5,q6,q7,data0,data1,data2,data3,data4,data5,data6,data7,clock];
		}
	}
	19_1_video.gdf
	{
		19_1_video [] []
		{
			0 [] [];
		}
	}
}
TREE
{
	19_1_video::(0,0):(0): 19_1_video.gdf
	{
		rs::(0,0):(21): rs.gdf;
		rs::(0,0):(19): rs.gdf;
		lpm_counter::(0,0):(18): lpm_counter.tdf
		{
			lpm_counter:15:(211,3):(71,c2): lpm_counter.tdf
			{
				lpm_add_sub:16:(307,7):(71,add_sub): lpm_add_sub.tdf
				{
					addcore:17:(211,4):(57,adder): addcore.tdf;
					altshift:4:(221,2):(88,result_ext_latency_ffs): altshift.tdf;
					altshift:13:(223,2):(109,carry_ext_latency_ffs): altshift.tdf;
					altshift:13:(225,2):(116,oflow_ext_latency_ffs): altshift.tdf;
				}
				lpm_constant:18:(327,6):(105,scdw): lpm_constant.tdf;
				lpm_decode:19:(334,4):(116,decode): lpm_decode.tdf
				{
					altshift:20:(75,2):(50,external_latency_ffs): altshift.tdf;
					declut:21:(94,5):(87,decoder): declut.tdf
					{
						bypassff:22:(57,3):(52,data_latency_ffs): bypassff.tdf;
						declut:23:(65,14):(62,sub_decoder1): declut.tdf;
						declut:23:(65,14):(83,sub_decoder0): declut.tdf;
					}
				}
				cmpconst:24:(1034,22):(142): cmpconst.tdf;
			}
		}
		lpm_compare::(0,0):(17): lpm_compare.tdf
		{
			comptree:7:(283,3):(51,comparator): comptree.tdf
			{
				cmpchain:8:(176,5):(47,cmp_end): cmpchain.tdf
				{
					comptree:9:(139,7):(47,comp): comptree.tdf
					{
						cmpchain:10:(136,7):(47,cmp3): cmpchain.tdf;
						cmpchain:10:(136,7):(59,cmp2): cmpchain.tdf;
						cmpchain:10:(136,7):(71,cmp1): cmpchain.tdf;
						cmpchain:10:(136,7):(83,cmp0): cmpchain.tdf;
						comptree:11:(162,4):(95,sub_comptree): comptree.tdf
						{
							cmpchain:12:(176,5):(39,cmp_end): cmpchain.tdf;
						}
					}
				}
			}
			altshift:13:(305,2):(78,aeb_ext_lat_ffs): altshift.tdf;
			altshift:13:(306,2):(85,agb_ext_lat_ffs): altshift.tdf;
		}
		busmux::(0,0):(5): busmux.tdf
		{
			lpm_mux:3:(47,13):(52): lpm_mux.tdf
			{
				altshift:4:(88,2):(54,external_latency_ffs): altshift.tdf;
				muxlut:5:(167,21):(75): muxlut.tdf;
				muxlut:5:(167,21):(88): muxlut.tdf;
				muxlut:5:(167,21):(101): muxlut.tdf;
				muxlut:5:(167,21):(114): muxlut.tdf;
				muxlut:5:(167,21):(127): muxlut.tdf;
				muxlut:5:(167,21):(140): muxlut.tdf;
				muxlut:5:(167,21):(153): muxlut.tdf;
				muxlut:5:(167,21):(166): muxlut.tdf;
			}
		}
		lpm_dff::(0,0):(14): lpm_dff.tdf;
		lpm_dff::(0,0):(9): lpm_dff.tdf;
		lpm_dff::(0,0):(10): lpm_dff.tdf;
		lpm_dff::(0,0):(12): lpm_dff.tdf;
		lpm_dff::(0,0):(11): lpm_dff.tdf;
		lpm_dff::(0,0):(13): lpm_dff.tdf;
		lpm_dff::(0,0):(8): lpm_dff.tdf;
		lpm_dff::(0,0):(7): lpm_dff.tdf;
	}
}
